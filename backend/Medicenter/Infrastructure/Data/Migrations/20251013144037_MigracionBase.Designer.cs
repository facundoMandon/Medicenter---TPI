// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251013144037_MigracionBase")]
    partial class MigracionBase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Appointments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionalId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("Appointments", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Hospitals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Hospitals", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Insurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoverageType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Insurance", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Specialties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Specialties", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DNI")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Rol")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("HospitalsProfessionals", b =>
                {
                    b.Property<int>("HospitalsId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionalsId")
                        .HasColumnType("int");

                    b.HasKey("HospitalsId", "ProfessionalsId");

                    b.HasIndex("ProfessionalsId");

                    b.ToTable("HospitalsProfessionals");
                });

            modelBuilder.Entity("InsuranceProfessionals", b =>
                {
                    b.Property<int>("InsurancesId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionalsId")
                        .HasColumnType("int");

                    b.HasKey("InsurancesId", "ProfessionalsId");

                    b.HasIndex("ProfessionalsId");

                    b.ToTable("InsuranceProfessionals");
                });

            modelBuilder.Entity("Domain.Entities.Administrators", b =>
                {
                    b.HasBaseType("Domain.Entities.Users");

                    b.ToTable("Administrators", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Patients", b =>
                {
                    b.HasBaseType("Domain.Entities.Users");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int");

                    b.Property<int>("affiliate_number")
                        .HasColumnType("int");

                    b.HasIndex("InsuranceId");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Professionals", b =>
                {
                    b.HasBaseType("Domain.Entities.Users");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<int>("n_matricula")
                        .HasColumnType("int");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Professionals", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Appointments", b =>
                {
                    b.HasOne("Domain.Entities.Patients", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Professionals", "Professional")
                        .WithMany("Appointments")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("HospitalsProfessionals", b =>
                {
                    b.HasOne("Domain.Entities.Hospitals", null)
                        .WithMany()
                        .HasForeignKey("HospitalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Professionals", null)
                        .WithMany()
                        .HasForeignKey("ProfessionalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InsuranceProfessionals", b =>
                {
                    b.HasOne("Domain.Entities.Insurance", null)
                        .WithMany()
                        .HasForeignKey("InsurancesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Professionals", null)
                        .WithMany()
                        .HasForeignKey("ProfessionalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Administrators", b =>
                {
                    b.HasOne("Domain.Entities.Users", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Administrators", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Patients", b =>
                {
                    b.HasOne("Domain.Entities.Users", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Patients", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Insurance", "Insurance")
                        .WithMany("Patients")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("Domain.Entities.Professionals", b =>
                {
                    b.HasOne("Domain.Entities.Users", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Professionals", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Specialties", "Specialty")
                        .WithMany("Professionals")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("Domain.Entities.Insurance", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Domain.Entities.Specialties", b =>
                {
                    b.Navigation("Professionals");
                });

            modelBuilder.Entity("Domain.Entities.Patients", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Domain.Entities.Professionals", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
